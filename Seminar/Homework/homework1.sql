SET SCHEMA FN000;

/* Airlines table creation and modification: */
CREATE TABLE AIRLINES (
  CODE CHAR(2) PRIMARY KEY NOT NULL,
  NAME VARCHAR(20)         NOT NULL
);

CREATE UNIQUE INDEX AIRLINES_INDEX
  ON AIRLINES(NAME);

/* Flights table creation and modification: */
CREATE TABLE FLIGHTS (
  AIRLINE_CODE CHAR(2)                   NOT NULL,
  FLIGHT_NUMBER SMALLINT PRIMARY KEY     NOT NULL,
  FLIGHT_DATE DATE                       NOT NULL,
  PRICE DECIMAL(9,2)                     NOT NULL,
  CURRENCY CHAR(3) DEFAULT 'EUR'         NOT NULL,
  MAX_ECON_CAP SMALLINT DEFAULT 0        NOT NULL,
  OCC_ECON_CAP SMALLINT DEFAULT 0        NOT NULL,
  MAX_BUSS_CAP SMALLINT DEFAULT 0        NOT NULL,
  OCC_BUSS_CAP SMALLINT DEFAULT 0        NOT NULL,
  PAYMENT_SUM DECIMAL(16,2) DEFAULT 0.00 NOT NULL,

  CONSTRAINT AIRLINE_CODE_FK FOREIGN KEY (AIRLINE_CODE) REFERENCES AIRLINES (CODE)
);

ALTER TABLE FLIGHTS
  ADD CONSTRAINT FLIGHT_NUM_CONSTR
CHECK (FLIGHT_NUMBER BETWEEN 1000 AND 9999)
  ADD CONSTRAINT POS_PRICE_CONSTR
CHECK (PRICE >= 0.0)
  ADD CONSTRAINT MAX_ECON_CAP_CONSTR
CHECK (MAX_ECON_CAP >= 0)
  ADD CONSTRAINT OCC_ECON_CAP_CONSTR
CHECK (OCC_ECON_CAP >= 0)
  ADD CONSTRAINT MAX_BUSS_CAP_CONSTR
CHECK (MAX_BUSS_CAP >= 0)
  ADD CONSTRAINT OCC_BUSS_CAP_CONSTR
CHECK (OCC_BUSS_CAP >= 0);

/* Schedules table creation and modification: */
CREATE TABLE SCHEDULES (
  AIRLINE_CODE CHAR(2)   NOT NULL,
  FLIGHT_NUMBER SMALLINT NOT NULL,
  DEPT_COUNTRY CHAR(2)   NOT NULL,
  DEPT_CITY VARCHAR(20)  NOT NULL,
  DEPT_AIRPORT CHAR(3)   NOT NULL,
  DEPT_TIME TIME         NOT NULL,
  ARRV_COUNTRY CHAR(2)   NOT NULL,
  ARRV_CITY VARCHAR(20)  NOT NULL,
  ARRV_AIRPORT CHAR(3)   NOT NULL,
  ARRV_TIME TIME         NOT NULL,
  FLIGHT_TIME INTEGER,

  CONSTRAINT SCHEDULES_PK PRIMARY KEY (FLIGHT_NUMBER, AIRLINE_CODE),
  CONSTRAINT AIRLINE_CODE_FK FOREIGN KEY (AIRLINE_CODE) REFERENCES AIRLINES (CODE),
  CONSTRAINT FLIGHT_NUMBER_FK FOREIGN KEY (FLIGHT_NUMBER) REFERENCES FLIGHTS (FLIGHT_NUMBER)
);

ALTER TABLE SCHEDULES
  ADD CONSTRAINT FLIGHT_TIME_CONSTR
CHECK (FLIGHT_TIME > 0);


/* Bookings table creation and modification: */
CREATE TABLE BOOKINGS (
  AIRLINE_CODE CHAR(2)               NOT NULL,
  FLIGHT_NUMBER SMALLINT             NOT NULL,
  BOOKING_NUMBER INTEGER PRIMARY KEY NOT NULL,
  CUSTOMER_NUMBER INTEGER            NOT NULL,
  ORDER_DATE DATE                    NOT NULL,

  CONSTRAINT AIRLINE_CODE_FK FOREIGN KEY (AIRLINE_CODE) REFERENCES AIRLINES (CODE),
  CONSTRAINT FLIGHT_NUMBER_FK FOREIGN KEY (FLIGHT_NUMBER) REFERENCES FLIGHTS (FLIGHT_NUMBER)
);

ALTER TABLE BOOKINGS
  ADD CONSTRAINT BOOK_NUM_CONSTR
CHECK (BOOKING_NUMBER BETWEEN 10000000 and 99999999)
  ADD CONSTRAINT CUST_NUM_CONSTR
CHECK (CUSTOMER_NUMBER BETWEEN 10000000 and 99999999);


/* Triggers: */
CREATE TRIGGER INSERT_BOOKINGS_ORDER_DATE_CHECK_TRIGGER
  BEFORE INSERT ON BOOKINGS
  REFERENCING NEW AS NEW_BOOKING
  FOR EACH ROW
  WHEN (NEW_BOOKING.ORDER_DATE > (SELECT FLIGHT_DATE
                                  FROM FLIGHTS
                                  WHERE FLIGHT_NUMBER = NEW_BOOKING.FLIGHT_NUMBER))
  BEGIN ATOMIC
    SIGNAL SQLSTATE '72005' ('Invalid order date!');
  END;

CREATE TRIGGER INSERT_SCHEDULES_TIME_CHECK_TRIGGER
  BEFORE INSERT ON SCHEDULES
  REFERENCING NEW AS NEW_SCHEDULE
  FOR EACH ROW
  WHEN (NEW_SCHEDULE.DEPT_TIME > NEW_SCHEDULE.ARRV_TIME)
  BEGIN ATOMIC
    SIGNAL SQLSTATE '72006' ('Invalid departure and arrival time!');
  END;

CREATE TRIGGER INSERT_FLIGHTS_ECON_OCC_MAX_TRIGGER
  BEFORE INSERT ON FLIGHTS
  REFERENCING NEW AS NEW_FLIGHT
  FOR EACH ROW
  WHEN (NEW_FLIGHT.OCC_ECON_CAP >= NEW_FLIGHT.MAX_ECON_CAP)
  BEGIN ATOMIC
    SIGNAL SQLSTATE '72007' ('Invalid OCC_ECON_CAP value!');
  END;

CREATE TRIGGER INSERT_FLIGHTS_BUSS_OCC_MAX_TRIGGER
  BEFORE INSERT ON FLIGHTS
  REFERENCING NEW AS NEW_FLIGHT
  FOR EACH ROW
  WHEN (NEW_FLIGHT.OCC_BUSS_CAP >= NEW_FLIGHT.MAX_BUSS_CAP)
  BEGIN ATOMIC
    SIGNAL SQLSTATE '72008' ('Invalid OCC_BUSS_CAP value!');
  END;

CREATE TRIGGER UPDATE_FLIGHTS_ECON_OCC_MAX_TRIGGER
  BEFORE UPDATE ON FLIGHTS
  REFERENCING NEW AS UPDATED_FLIGHT
  FOR EACH ROW
  WHEN (UPDATED_FLIGHT.OCC_ECON_CAP >= UPDATED_FLIGHT.MAX_ECON_CAP)
  BEGIN ATOMIC
    SIGNAL SQLSTATE '72009' ('Invalid OCC_ECON_CAP value!');
  END;

CREATE TRIGGER UPDATE_FLIGHTS_BUSS_OCC_MAX_TRIGGER
  BEFORE UPDATE ON FLIGHTS
  REFERENCING NEW AS UPDATED_FLIGHT
  FOR EACH ROW
  WHEN (UPDATED_FLIGHT.OCC_BUSS_CAP >= UPDATED_FLIGHT.MAX_BUSS_CAP)
  BEGIN ATOMIC
    SIGNAL SQLSTATE '72010' ('Invalid OCC_BUSS_CAP value!');
  END;